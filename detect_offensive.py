# -*- coding: utf-8 -*-
"""detect-offensive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aRNUIexgFjBAchyjSNdUa2Nl1vW2DWzm
"""

import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

nltk.download('stopwords')
turkish_stopwords = stopwords.words('turkish')

"""# **Pre-processing**"""

def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'@[A-Za-z0-9_]+', '', text)  # kullanıcı etiketlerini kaldırma
    text = re.sub(r'http\S+', '', text)  # URL'leri kaldırma
    text = re.sub(r'\d+', '', text)  # sayıları kaldırma
    text = re.sub(r'[^\w\s]', '', text)  # noktalama işaretlerini kaldırma
    tokens = text.split()
    tokens = [word for word in tokens if word not in turkish_stopwords]  # stopwords kaldırma
    return " ".join(tokens)

# Veri setlerini yükleme
train_df = pd.read_json('/content/drive/MyDrive/Colab Notebooks/offenseval/train.jsonlines', lines=True)
val_df = pd.read_json('/content/drive/MyDrive/Colab Notebooks/offenseval/val.jsonlines', lines=True)
test_df = pd.read_json('/content/drive/MyDrive/Colab Notebooks/offenseval/test.jsonlines', lines=True)

# Ön işleme adımlarını uygulama
train_df['cleaned_text'] = train_df['text'].apply(preprocess_text)
val_df['cleaned_text'] = val_df['text'].apply(preprocess_text)
test_df['cleaned_text'] = test_df['text'].apply(preprocess_text)

"""# **Feature Extraction**"""

# Etiketleri binary formata çevirme
train_df['label'] = (train_df['label'] == 'offensive').astype(int)
val_df['label'] = (val_df['label'] == 'offensive').astype(int)
test_df['label'] = (test_df['label'] == 'offensive').astype(int)

# Özellik çıkarma yöntemleri
vectorizers = {
    "Bag-of-Words": CountVectorizer(max_features=5000),
    "TF-IDF": TfidfVectorizer(max_features=5000)
}

"""# **Training and Evaluation**"""

# Modeller
models = {
    "Naive Bayes": MultinomialNB(),
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Neural Network": MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, early_stopping=True)
}

results = []

# Farklı vektörleştirme ve model kombinasyonlarını deneme
for vec_name, vectorizer in vectorizers.items():
    X_train = vectorizer.fit_transform(train_df['cleaned_text'])
    X_val = vectorizer.transform(val_df['cleaned_text'])
    X_test = vectorizer.transform(test_df['cleaned_text'])

    y_train = train_df['label']
    y_val = val_df['label']
    y_test = test_df['label']

    for model_name, model in models.items():
        # Model eğitme
        model.fit(X_train, y_train)

        # Validation setinde performans
        y_pred_val = model.predict(X_val)
        val_f1 = f1_score(y_val, y_pred_val)

        # Test setinde nihai değerlendirme
        y_pred_test = model.predict(X_test)
        acc_test = accuracy_score(y_test, y_pred_test)
        prec_test = precision_score(y_test, y_pred_test)
        rec_test = recall_score(y_test, y_pred_test)
        f1_test = f1_score(y_test, y_pred_test)

        results.append({
            "Vectorizer": vec_name,
            "Model": model_name,
            "Validation F1": val_f1,
            "Test Accuracy": acc_test,
            "Test Precision": prec_test,
            "Test Recall": rec_test,
            "Test F1 Score": f1_test
        })

# Sonuçlar
results_df = pd.DataFrame(results)
print("Performans Sonuçları:")
print(results_df)

plt.figure(figsize=(10, 6))
sns.barplot(data=results_df, x="Vectorizer", y="Test F1 Score", hue="Model")
plt.title("Test Seti Üzerinde F1 Score Karşılaştırması")
plt.ylabel("F1 Score")
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Confusion Matrix hesaplama
cm = confusion_matrix(y_val, y_pred_val)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Not Offensive", "Offensive"])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.show()